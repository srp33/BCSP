#!/bin/bash

source scripts/create_temp_files

mkdir -p raw raw/utah raw/ontario1 raw/ontario2 normalization/utah normalization/ontario1 normalization/ontario2 summarization/utah summarization/ontario1 summarization/ontario2 matrices misc genesets

# Specify meta files
exonPlanDbAffyFile=library/HuEx-1_0.green.flat
exonAffyProbeTabFile=library/HuEx-1_0-st-v2.probe.tab
exonAffyFullProbesFile=library/HuEx-1.0.full.probes.txt

exonGeneProbeFile=library/HuEx-1.0.gene_probe.txt
exonGreenProbesFile=library/HuEx-1.0.green.probes.txt

# Parse Affy meta files to generate secondary meta files
#python code/ParseProbesFromPlanDbAffyFile.py $exonPlanDbAffyFile False False $exonGreenProbesFile
#python code/MatchKeysWithValues.py $exonPlanDbAffyFile 13 0 $exonGeneProbeFile

# These were required for the GEO submission
#python code/Create_Pgf_Mps_Clf_Files.py $exonGeneProbeFile $exonAffyProbeTabFile library/HuEx-1_0-st-v2.hg18.custom.pgf library/HuEx-1_0-st-v2.hg18.custom.mps library/HuEx-1_0-st-v2.hg18.custom.clf

# Parse gene information from external database files
#python code/SelectColumns.py library/Entrez_Homo_sapiens.gene_info.txt 1,2 library/Entrez_gene_symbols.txt
#python code/SelectColumns.py library/Entrez_Homo_sapiens.gene_info.txt 1,4 library/Entrez_gene_synonyms.txt
#python code/SelectColumns.py library/Entrez_Homo_sapiens.gene_info.txt 1,8 library/Entrez_gene_names.txt

# Parse pathway files
#rm -f genesets/*
#cp -v library/*gene.ids.txt genesets/
#python code/ParseEntrezGeneIDsForKeggPathways.py library/kegg_hsa_pathways.txt library/kegg_hsa_gene_pathway.txt library/kegg_hsa_entrezgene.txt genesets/KEGG_{PATHWAY_NAME}.gene.ids.txt
#python code/SplitGmtToGeneSetFiles.py library/c2.cp.v3.0.entrez.gmt KEGG "genesets/{PATHWAY_NAME}.gene.ids.txt"
#python code/MergeGeneIDFilesIntoGmt.py "genesets/*" library/all_pathways.gmt
#python code/SelectColumns.py library/all_pathways.gmt 0 $tmpFile1
#sort $tmpFile1 > library/all_pathways.txt

# Create class files
#python code/CreateClassFile.py clinical/family.txt 0 1 "Control=2,4;BRCACancer=3,5" clinical/classes.24vs35.txt
#python code/CreateClassFile.py clinical/family.txt 0 1 "Control=0,1,2,4;BRCACancer=3,5" clinical/classes.0124vs35.txt
##python code/CreateArff.py None clinical/classes.0124vs35.txt None True ML-Flex/InputData/classes.0124v35.arff
#python code/FilterFile.py clinical/classes.24vs35.txt "x[0].startswith('Utah__')" 0 clinical/utah.24vs35.txt
#python code/FilterFile.py clinical/classes.24vs35.txt "x[0].startswith('Ontario__')" 0 clinical/ontario.24vs35.txt
#python code/FilterFile.py clinical/classes.0124vs35.txt "x[0].startswith('Utah__')" 0 clinical/utah.0124vs35.txt
#python code/FilterFile.py clinical/classes.0124vs35.txt "x[0].startswith('Ontario__')" 0 clinical/ontario.0124vs35.txt

# Create sample files
#rm -f ML-Flex/Experiments/*samples.txt
#python code/FilterFile.py clinical/family.txt "'Utah__' in x[0]" 0 ML-Flex/Experiments/0124vs35.training.samples.txt
#python code/FilterFile.py clinical/family.txt "'Ontario__' in x[0]" 0 ML-Flex/Experiments/0124vs35.test.samples.txt
#python code/FilterFile.py clinical/family.txt "'Utah__' in x[0] and x[1] in ['2','3','4','5']" 0 ML-Flex/Experiments/24vs35.training.samples.txt
#python code/FilterFile.py clinical/family.txt "'Ontario__' in x[0] or x[1] in ['0','1']" 0 ML-Flex/Experiments/24vs35.test.samples.txt
#for f in ML-Flex/Experiments/*samples.txt
#do
#  python code/SelectColumns.py $f 0 $tmpFile1
#  cp $tmpFile1 $f
#done

# Normalize CEL files
#scripts/normalizeDir utah $exonAffyProbeTabFile "0/2/3/9" $exonAffyFullProbesFile
#scripts/normalizeDir ontario1 $exonAffyProbeTabFile "0/2/3/9" $exonAffyFullProbesFile
#scripts/normalizeDir ontario2 $exonAffyProbeTabFile "0/2/3/9" $exonAffyFullProbesFile

#scripts/normalizeDir Bellacosa_Breast library/HG-U133_Plus_2.probe_tab "6/1/2/4/3" None
#scripts/normalizeDir Bellacosa_Ovary library/HG-U133_Plus_2.probe_tab "6/1/2/4/3" None

# Summarize data at gene level
#scripts/summarizeNormDir .norm.txt utah 1 expr green gene $exonGeneProbeFile $exonGreenProbesFile 5 calculateTrimmedMean None
#scripts/summarizeNormDir .norm.txt ontario1 1 expr green gene $exonGeneProbeFile $exonGreenProbesFile 5 calculateTrimmedMean None
#scripts/summarizeNormDir .norm.txt ontario2 1 expr green gene $exonGeneProbeFile $exonGreenProbesFile 5 calculateTrimmedMean None

#scripts/summarizeNormDir .norm.txt Bellacosa_Breast 1 expr green gene library/HG-U133_Plus2.gene_probe.txt library/HG-U133_Plus2.green.probes.txt 5 calculateTrimmedMean None
#scripts/summarizeNormDir .norm.txt Bellacosa_Ovary 1 expr green gene library/HG-U133_Plus2.gene_probe.txt library/HG-U133_Plus2.green.probes.txt 5 calculateTrimmedMean None

# Create matrix files with summarized data
#python code/BuildMatrixFile.py summarization/utah/ .gene.green.expr.txt None 1 Utah__ matrices/utah.expr.txt
#python code/BuildMatrixFile.py summarization/ontario1/ .gene.green.expr.txt None 1 Ontario__ matrices/ontario1.expr.txt
#python code/BuildMatrixFile.py summarization/ontario2/ .gene.green.expr.txt None 1 Ontario__ matrices/ontario2.expr.txt

#python code/BuildMatrixFile.py summarization/Bellacosa_Breast/ .gene.green.expr.txt None 1 "" matrices/Bellacosa.txt
#python code/BuildMatrixFile.py summarization/Bellacosa_Ovary/ .gene.green.expr.txt None 1 "" matrices/Bellacosa_Ovary.txt

# Build matrix files for Utah and Ontario
#for validationCohort in ontario1 ontario2
#do
  # Batch adjust data
#  python code/MergeMatrixOnRowNames.py matrices/utah.expr.txt matrices/${validationCohort}.expr.txt matrices/utah${validationCohort}.expr.txt
#  cd matrices
#  Rscript --vanilla ../code/BatchAdjust.R ../code/ComBat.R utah${validationCohort}.expr.txt ../clinical/BatchInfo.Study.txt utah${validationCohort}.batch.txt
#  cd ..

  # Remove genes that are associated with epi/blood variables
#  Rscript --vanilla code/EpiBloodFiltering.R clinical/blood.txt secure/epidemiologic.txt matrices/utah${validationCohort}.batch.txt misc/utah${validationCohort}.epiblood.keep.txt misc/utah${validationCohort}.epiblood.filter.txt
#  python code/FilterFileByColumnValues.py matrices/utah${validationCohort}.batch.txt 0 misc/utah${validationCohort}.epiblood.keep.txt 1 $tmpFile1
#  cp $tmpFile1 matrices/utah${validationCohort}.batch.txt

  # Create ARFF file for full data set
#  python code/CreateArff.py matrices/utah${validationCohort}.batch.txt clinical/classes.0124vs35.txt None True ML-Flex/InputData/utah${validationCohort}.batch.All.arff

  # Create ARFF file for pathway gene sets
#  allDataProcessorsText=
#  for pathwayFile in genesets/*.gene.ids.txt
#  do
#    pathway=`basename $pathwayFile`
#    pathway=${pathway/\.gene\.ids\.txt/}
#    echo Creating ARFF for $pathway for $validationCohort
#
#    scripts/createArffForGeneList matrices/utah${validationCohort}.batch.txt genesets/$pathway.gene.ids.txt clinical/classes.0124vs35.txt ML-Flex/InputData/utah${validationCohort}.batch.$pathway.arff
#
#    dataProcessorText="mlflex.dataprocessors.ArffDataProcessor(\"InputData/utah${validationCohort}.batch.$pathway.arff\")"
#
#    if [ "$allDataProcessorsText" == "" ]
#    then
#      allDataProcessorsText="$dataProcessorText"
#    else
#      allDataProcessorsText="$allDataProcessorsText;$dataProcessorText"
#    fi
#  done
#
#  for f in ML-Flex/Experiments/utah${validationCohort}_Pathways*
#  do
#    python code/ReplaceText.py $f "{processors}" "$allDataProcessorsText" $f
#  done
#done

# Build Arff files for Lim, et al. (Visvader)
#python code/CreateArff.py None clinical/Visvader.Control_vs_BRCA.classes.txt None True ML-Flex/InputData/Visvader.classes.arff

#allDataProcessorsText=
#for pathwayFile in genesets/*.gene.ids.txt
#do
#  pathway=`basename $pathwayFile`
#  pathway=${pathway/\.gene\.ids\.txt/}
#  echo Creating data file for $pathway for Visvader
#
#  scripts/createArffForGeneList matrices/Visvader.txt genesets/$pathway.gene.ids.txt clinical/Visvader.Control_vs_BRCA.classes.txt ML-Flex/InputData/Visvader.$pathway.arff
#
#  dataProcessorText="mlflex.dataprocessors.ArffDataProcessor(\"InputData/Visvader.$pathway.arff\")"
#
#  if [ "$allDataProcessorsText" == "" ]
#  then
#    allDataProcessorsText="$dataProcessorText"
#  else
#    allDataProcessorsText="$allDataProcessorsText;$dataProcessorText"
#  fi
#done
#
#python code/ReplaceText.py ML-Flex/Experiments/Visvader_Pathways.txt "{processors}" "$allDataProcessorsText" ML-Flex/Experiments/Visvader_Pathways.txt
#
#allDataProcessorsText=
#for pathwayFile in genesets/*.gene.ids.txt
#do
#  pathway=`basename $pathwayFile`
#  pathway=${pathway/\.gene\.ids\.txt/}
#  echo Creating data file for $pathway for Bellacosa
#
#  scripts/createArffForGeneList matrices/Bellacosa.txt genesets/$pathway.gene.ids.txt clinical/Bellacosa.classes.txt ML-Flex/InputData/Bellacosa.$pathway.arff
#
#  dataProcessorText="mlflex.dataprocessors.ArffDataProcessor(\"InputData/Bellacosa.$pathway.arff\")"
#
#  if [ "$allDataProcessorsText" == "" ]
#  then
#    allDataProcessorsText="$dataProcessorText"
#  else
#    allDataProcessorsText="$allDataProcessorsText;$dataProcessorText"
#  fi
#done
#
#python code/ReplaceText.py ML-Flex/Experiments/Bellacosa_Pathways.txt "{processors}" "$allDataProcessorsText" ML-Flex/Experiments/Bellacosa_Pathways.txt
#
#allDataProcessorsText=
#for pathwayFile in genesets/*.gene.ids.txt
#do
#  pathway=`basename $pathwayFile`
#  pathway=${pathway/\.gene\.ids\.txt/}
#  echo Creating data file for $pathway for Bellacosa_Ovary
#
#  scripts/createArffForGeneList matrices/Bellacosa_Ovary.txt genesets/$pathway.gene.ids.txt clinical/Bellacosa_Ovary.classes.txt ML-Flex/InputData/Bellacosa_Ovary.$pathway.arff
#
#  dataProcessorText="mlflex.dataprocessors.ArffDataProcessor(\"InputData/Bellacosa_Ovary.$pathway.arff\")"
#
#  if [ "$allDataProcessorsText" == "" ]
#  then
#    allDataProcessorsText="$dataProcessorText"
#  else
#    allDataProcessorsText="$allDataProcessorsText;$dataProcessorText"
#  fi
#done
#
#python code/ReplaceText.py ML-Flex/Experiments/Bellacosa_Ovary_Pathways.txt "{processors}" "$allDataProcessorsText" ML-Flex/Experiments/Bellacosa_Ovary_Pathways.txt
